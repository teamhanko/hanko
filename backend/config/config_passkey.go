package config

import "github.com/invopop/jsonschema"

type Passkey struct {
	// `acquire_on_registration` configures how users are prompted creating a passkey on registration.
	AcquireOnRegistration string `yaml:"acquire_on_registration" json:"acquire_on_registration,omitempty" koanf:"acquire_on_registration" split_words:"true" jsonschema:"default=always,enum=always,enum=conditional,enum=never"`
	// `acquire_on_login` configures how users are prompted creating a passkey on login.
	AcquireOnLogin string `yaml:"acquire_on_login" json:"acquire_on_login,omitempty" koanf:"acquire_on_login" split_words:"true" jsonschema:"default=always,enum=always,enum=conditional,enum=never"`
	// `attestation_preference` is used to specify the preference regarding attestation conveyance during
	// credential generation.
	AttestationPreference string `yaml:"attestation_preference" json:"attestation_preference,omitempty" koanf:"attestation_preference" split_words:"true" jsonschema:"default=direct,enum=direct,enum=indirect,enum=none"`
	// `enabled` determines whether users can create or authenticate with passkeys.
	Enabled bool `yaml:"enabled" json:"enabled,omitempty" koanf:"enabled" jsonschema:"default=true"`
	// `limit` defines the maximum number of passkeys a user can have.
	Limit int `yaml:"limit" json:"limit,omitempty" koanf:"limit" jsonschema:"default=10"`
	// `optional` determines whether users must create a passkey when prompted. The last remaining passkey cannot be
	// deleted if passkeys are required (`optional: false`).
	//
	// It also takes part in determining the order of password and passkey acquisition
	// on login and registration (see also `acquire_on_login` and `acquire_on_registration`): if one credential type is
	// required (`optional: false`) then that one takes precedence, i.e. is acquired first.
	Optional bool `yaml:"optional" json:"optional,omitempty" koanf:"optional" jsonschema:"default=true"`
	// `user_verification` specifies the requirements regarding local authorization with an authenticator through
	//  various authorization gesture modalities; for example, through a touch plus pin code,
	//  password entry, or biometric recognition.
	//
	// The setting applies to both WebAuthn registration and authentication ceremonies.
	UserVerification string `yaml:"user_verification" json:"user_verification,omitempty" koanf:"user_verification" split_words:"true" jsonschema:"default=preferred,enum=required,enum=preferred,enum=discouraged"`
}

func (Passkey) JSONSchemaExtend(schema *jsonschema.Schema) {
	acquireOnRegistration, _ := schema.Properties.Get("acquire_on_registration")
	acquireOnRegistration.Extras = map[string]any{"meta:enum": map[string]string{
		"always": "Indicates that users are always prompted to create a passkey on registration.",
		"conditional": `Indicates that users are prompted to create a passkey on registration as long as the user does
						not have a password.

						If passwords are also conditionally acquired on registration, then users are given a choice as
						to what type of credential to create.`,
		"never": "Indicates that users are never prompted to create a passkey on registration.",
	}}

	acquireOnLogin, _ := schema.Properties.Get("acquire_on_login")
	acquireOnLogin.Extras = map[string]any{"meta:enum": map[string]string{
		"always": `Indicates that users are always prompted to create a passkey on login
					provided that they do not already have a passkey.`,
		"conditional": `Indicates that users are prompted to create a passkey on login provided that
						they do not already have a passkey and do not have a password.

						If passkeys are also conditionally acquired on login then users are given a choice as to what
						type of credential to register.`,
		"never": "Indicates that users are never prompted to create a passkey on login.",
	}}

	userVerification, _ := schema.Properties.Get("user_verification")
	userVerification.Extras = map[string]any{"meta:enum": map[string]string{
		"required": "Indicates that user verification is always required.",
		"preferred": `Indicates that user verification is preferred but will not fail the operation if no
						user verification was performed.`,
		"discouraged": "Indicates that no user verification should be performed.",
	}}

	attestationPreference, _ := schema.Properties.Get("attestation_preference")
	attestationPreference.Extras = map[string]any{"meta:enum": map[string]string{
		"direct": `Indicates that the Relying Party wants to receive the attestation statement as generated by
					the authenticator.`,
		"indirect": `Indicates that the Relying Party prefers an attestation conveyance yielding verifiable
					attestation statements, but allows the client to decide how to obtain such attestation statements.`,
		"none": `Indicates that the Relying Party is not interested in authenticator attestation.`,
	}}

}
