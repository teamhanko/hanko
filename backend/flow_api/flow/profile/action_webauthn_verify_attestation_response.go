package profile

import (
	"fmt"
	"github.com/teamhanko/hanko/backend/flow_api/flow/shared"
	"github.com/teamhanko/hanko/backend/flowpilot"
	"github.com/teamhanko/hanko/backend/persistence/models"
)

type WebauthnVerifyAttestationResponse struct {
	shared.Action
}

func (a WebauthnVerifyAttestationResponse) GetName() flowpilot.ActionName {
	return shared.ActionWebauthnVerifyAttestationResponse
}

func (a WebauthnVerifyAttestationResponse) GetDescription() string {
	return "Send the result which was generated by creating a webauthn credential."
}

func (a WebauthnVerifyAttestationResponse) Initialize(c flowpilot.InitializationContext) {
	deps := a.GetDeps(c)

	if !deps.Cfg.Passkey.Enabled || !c.Stash().Get(shared.StashPathWebauthnAvailable).Bool() {
		c.SuspendAction()
	}

	c.AddInputs(flowpilot.JSONInput("public_key").Required(true))
}

func (a WebauthnVerifyAttestationResponse) Execute(c flowpilot.ExecutionContext) error {
	if valid := c.ValidateInputData(); !valid {
		return c.Error(flowpilot.ErrorFormDataInvalid)
	}

	userModel, ok := c.Get("session_user").(*models.User)
	if !ok {
		return c.Error(flowpilot.ErrorOperationNotPermitted)
	}

	var email string
	if primaryEmailModel := userModel.Emails.GetPrimary(); primaryEmailModel != nil {
		email = primaryEmailModel.Address
	}

	err := c.Stash().Set(shared.StashPathEmail, email)
	if err != nil {
		return fmt.Errorf("failed to set user_id to the stash: %w", err)
	}

	err = c.Stash().Set(shared.StashPathUserID, userModel.ID.String())
	if err != nil {
		return fmt.Errorf("failed to set user_id to the stash: %w", err)
	}

	err = c.Stash().Set(shared.StashPathUsername, userModel.GetUsername())
	if err != nil {
		return fmt.Errorf("failed to set user_id to the stash: %w", err)
	}

	err = c.ExecuteHook(shared.VerifyAttestationResponse{})
	if err != nil {
		return err
	}

	return c.Continue(shared.StateProfileInit)
}
