package login

import (
	"errors"
	"fmt"
	"github.com/gofrs/uuid"
	"github.com/teamhanko/hanko/backend/flow_api/flow/shared"
	"github.com/teamhanko/hanko/backend/flow_api/services"
	"github.com/teamhanko/hanko/backend/flowpilot"
)

type WebauthnVerifyAssertionResponse struct {
	shared.Action
}

func (a WebauthnVerifyAssertionResponse) GetName() flowpilot.ActionName {
	return ActionWebauthnVerifyAssertionResponse
}

func (a WebauthnVerifyAssertionResponse) GetDescription() string {
	return "Send the result which was generated by using a webauthn credential."
}

func (a WebauthnVerifyAssertionResponse) Initialize(c flowpilot.InitializationContext) {
	if !c.Stash().Get("webauthn_available").Bool() {
		c.SuspendAction()
	}

	c.AddInputs(flowpilot.JSONInput("assertion_response").Required(true).Persist(false))
}

func (a WebauthnVerifyAssertionResponse) Execute(c flowpilot.ExecutionContext) error {
	deps := a.GetDeps(c)

	if valid := c.ValidateInputData(); !valid {
		return c.ContinueFlowWithError(c.GetCurrentState(), flowpilot.ErrorFormDataInvalid)
	}

	if !c.Stash().Get("webauthn_session_data_id").Exists() {
		return errors.New("webauthn_session_data_id is not present in the stash")
	}

	sessionDataID := uuid.FromStringOrNil(c.Stash().Get("webauthn_session_data_id").String())
	assertionResponse := c.Input().Get("assertion_response").String()

	params := services.VerifyAssertionResponseParams{
		Tx:                deps.Tx,
		SessionDataID:     sessionDataID,
		AssertionResponse: assertionResponse,
	}

	userModel, err := deps.WebauthnService.VerifyAssertionResponse(params)
	if err != nil {
		if errors.Is(err, services.ErrInvalidWebauthnCredential) {
			return c.ContinueFlowWithError(StateLoginInit, shared.ErrorPasskeyInvalid.Wrap(err))
		}

		return fmt.Errorf("failed to verify assertion response: %w", err)
	}

	err = c.Stash().Set("user_id", userModel.ID.String())
	if err != nil {
		return fmt.Errorf("failed to set user_id to the stash: %w", err)
	}

	return c.ContinueFlow(shared.StateSuccess)
}
